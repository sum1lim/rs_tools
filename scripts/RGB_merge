#!/usr/bin/env python3
from rs_tools.install import install
install()

import argparse
import os
import re
import sys
import cv2
import numpy

from rs_tools.RGB import merge
from rs_tools.utils import output, output_to_window


def main(args):
    inDir = args.input
    try:
        flist = os.listdir(inDir)
    except FileNotFoundError:
        print("The given file path is not valid or does not exist", file=sys.stderr)
        exit(1)

    bands = [re.sub("\.\w+$", "", f) for f in flist]

    try:
        Rband = args.red
        Rindex = bands.index(Rband)
        Rfile = inDir + "/" + flist[Rindex]
        Gband = args.green
        Gindex = bands.index(Gband)
        Gfile = inDir + "/" + flist[Gindex]
        Bband = args.blue
        Bindex = bands.index(Bband)
        Bfile = inDir + "/" + flist[Bindex]
    except ValueError:
        print("The band is not available")
        exit(5)

    merged_image = merge(args.input, Rfile, Gfile, Bfile)

    directories = inDir.split("/")
    file_path = ""
    for i in directories[:-1]:
        file_path += i
        file_path += "/"

    R_out = re.sub("\.\w+", "", Rfile)
    R_out = re.sub(".*/", "", R_out)
    G_out = re.sub("\.\w+", "", Gfile)
    G_out = re.sub(".*/", "", G_out)
    B_out = re.sub("\.\w+", "", Bfile)
    B_out = re.sub(".*/", "", B_out)

    output_name = R_out + "+" + G_out + "+" + B_out
    output_to_window(output_name, merged_image)

    if args.extension:
        outExtension = "." + args.extension
        outFile = file_path + output_name + outExtension
        try:
            output(outFile, merged_image)
        except ValueError:
            print("Not a valid file type")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--input", type=str, help="Please provide bands collection path"
    )
    parser.add_argument(
        "-r", "--red", type=str, help="Please provide an 'R' band image file(Ex. B04)"
    )
    parser.add_argument(
        "-g", "--green", type=str, help="Please provide an 'G' band image file(Ex. B03)"
    )
    parser.add_argument(
        "-b", "--blue", type=str, help="Please provide an 'B' band image file(Ex. B02)"
    )
    parser.add_argument(
        "--extension",
        type=str,
        help="Please provide the output file extension(Ex. png, jpg, tiff)",
        choices=["png", "jpg", "tiff"],
    )

    args = parser.parse_args()
    main(args)
