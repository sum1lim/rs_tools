#!/usr/bin/env python3
from rs_tools.install import install

install()

import argparse
import os
import sys
import re
import csv
import numpy as np

from rs_tools.utils import output, output_to_window
from rs_tools.K_Means import generate_K_means, colorNames, colors


def print_stats(stats_dict, total_num_pixels):
    print("\nResult:")
    for c in stats_dict.keys():
        print(
            colorNames[c]
            + ": "
            + str(stats_dict[c])
            + "pixels ("
            + str((stats_dict[c] / total_num_pixels) * 100)
            + "%)"
        )
    print("\nTotal: " + str(total_num_pixels) + "pixels")


def write_stats(labeled_image, outDir):
    try:
        os.mkdir(outDir)
    except FileExistsError:
        None

    with open(re.sub("$", f"/KMeans_stats.csv", outDir), "w", newline="") as statsFile:
        unique_colors, counts = np.unique(labeled_image, return_counts=True)
        stats_dict = dict(zip(unique_colors, counts))
        total_num_pixels = sum(stats_dict.values())

        print_stats(stats_dict, total_num_pixels)

        writer = csv.writer(statsFile)
        writer.writerow(["class", "#pixels", "pecentage(%)"])
        for c in stats_dict.keys():
            writer.writerow(
                [
                    colorNames[c],
                    stats_dict[c],
                    (stats_dict[c] / total_num_pixels) * 100,
                ]
            )
        writer.writerow(["total", total_num_pixels, 100])


def main(args):

    inDir = args.input

    features = args.features[:]

    inFiles_li = []
    flist = os.listdir(inDir)
    extension = ""
    for f in flist:
        if ".".join(f.split(".")[:-1]) in features:
            inFiles_li.append(f"{inDir}/{f}")
            features.remove(".".join(f.split(".")[:-1]))

    if features != []:
        sys.exit("At least one of the input features does not exist.")

    clustered_image, labeled_image = generate_K_means(
        inFiles_li, args.num_iterations, args.num_classes
    )

    output_to_window("clustered", clustered_image.tolist())

    if args.extension:
        outDir = f"{inDir}_KMeans"
        write_stats(labeled_image, outDir)

    # print_stats(pix_location, pix_count)

    # output_name = args.input.split("/")[-1] + "_KMeans"
    # output_to_window(output_name, pix_val)

    # plot_output_name = output_name + "_plot"
    # output_to_window(plot_output_name, plot_val)

    # if args.extension:
    #     outDir = f"{inDir}_KMeans"
    #     try:
    #         os.mkdir(outDir)
    #     except FileExistsError:
    #         None
    #     classifiedFile = re.sub(
    #         "$", f"/{args.VIS}_{args.NIR}_KMeans.{args.extension}", outDir
    #     )

    #     try:
    #         output(classifiedFile, pix_val)
    #     except ValueError:
    #         print("Not a valid file type")

    #     plotFile = re.sub("$", f"/{args.VIS}_{args.NIR}_KMeans_plot.png", outDir)
    #     output(plotFile, plot_val)

    #     write_stats(args, pix_location, pix_count, outDir)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--input", type=str, help="Please provide bands collection path"
    )
    parser.add_argument(
        "--features",
        type=str,
        nargs="+",
        help="Feature bands used for clustering.",
    )
    parser.add_argument(
        "--num_iterations", type=int, help="Define the number of iterations"
    )
    parser.add_argument(
        "--num_classes", type=int, help="Define the number of classes from 1 to 7"
    )
    parser.add_argument(
        "--extension",
        type=str,
        help="Please provide the output file extension(Ex. png, jpg, tiff)",
        choices=["png", "jpg", "tiff"],
    )

    args = parser.parse_args()
    main(args)
